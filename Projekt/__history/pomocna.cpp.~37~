//---------------------------------------------------------------------------

#pragma hdrstop

#include "pomocna.h"

void Tacka::Crtaj(TImage* slika) {
    //slika->Canvas->Brush->Color = clRed;
    slika->Canvas->Ellipse(Rect(x-3,y-3,x+3, y+3));
}

bool operator<(Tacka A, Tacka B) {
	if(A.x < B.x) return true;
	if(A.x == B.x) return A.y < B.y;
	return false;
}

/////////////////////////////////////////////////////////////

int Orijentacija(Tacka A, Tacka B, Tacka C) {
	int P = A.x*(B.y-C.y) + B.x*(C.y-A.y)+ C.x*(A.y - B.y);
	if(P > 0) return -1;
	else if(P < 0) return 1;
	else return 0;
}

/////////////////////////////////////////////////////////////

bool daLiSeSijeku(Duz p, Duz q) {
	return
	Orijentacija(p.A,p.B,q.A) != Orijentacija(p.A,p.B,q.B) &&
    Orijentacija(q.A,q.B,p.A) != Orijentacija(q.A,q.B,p.B);
}

/////////////////////////////////////////////////////////////

void IscrtajPoligon(vector<Tacka> &A, TImage* slika) {
	slika->Canvas->MoveTo(A[A.size()-1].x,A[A.size()-1].y);
	for(int i = 0; i < A.size(); i++)
	  slika->Canvas->LineTo(A[i].x,A[i].y);
}

/////////////////////////////////////////////////////////////

bool operator==(Tacka A, Tacka B) {
    return A.x == B.x && A.y == B.y;
}

/////////////////////////////////////////////////////////////

bool daLiJeUnutarTrougla(Tacka A, Tacka B, Tacka C, Tacka P) {
   return  Orijentacija(A,B,C)==Orijentacija(A,B,P) &&
		   Orijentacija(B,C,A)==Orijentacija(B,C,P) &&
		   Orijentacija(C,A,B)==Orijentacija(C,A,P);
}

/////////////////////////////////////////////////////////////

bool daLiJeUnutarKonveksnog(vector<Tacka> &konveksni, Tacka P) {
	int pocetak = 1, kraj = konveksni.size()-1;
	while(kraj - pocetak > 1) {
		int sredina = (pocetak + kraj) / 2;
		if(Orijentacija(konveksni[0],konveksni[sredina],P)>0)
		  kraj = sredina;
		else pocetak = sredina;
	}
	return daLiJeUnutarTrougla(konveksni[0],konveksni[pocetak],konveksni[kraj],P);
}

/////////////////////////////////////////////////////////////

void Tangente(vector<Tacka> &konveksni, Tacka A, int &lijeva, int &desna) {
	int n = konveksni.size();
    lijeva = -1;
	int P = 0, K = n-1;
	while(K - P > 1) {
		int S = (P+K)/2;
		//ShowMessage("Pocetak" + IntToStr(P));
		//ShowMessage("Sredina" + IntToStr(S));
        //ShowMessage("Kraj" + IntToStr(K));
		if (Orijentacija(A, konveksni[S],konveksni[(S+1)%n]) < 0 &&
			Orijentacija(A, konveksni[S],konveksni[(S+n-1)%n]) < 0) {
			lijeva = S;
			break;
		}
		if (Orijentacija(A, konveksni[S],konveksni[(S+1)%n]) < 0)
		  if(Orijentacija(A,konveksni[S],konveksni[P]) < 0 ||
			 Orijentacija(A,konveksni[P],konveksni[(P+n-1)%n])<0)
			   K = S-1;
		  else P = S+1;
		else if(Orijentacija(A,konveksni[S],konveksni[K])<0 ||
				Orijentacija(A,konveksni[K],konveksni[(K+1)%n])<0)
				P = S+1;
			 else K = S-1;
	}
	if(lijeva == -1)
		if(K==P)
		  lijeva = P;
		else {  //K == P+1
		  if (Orijentacija(A, konveksni[P],konveksni[(P+1)%n]) < 0 &&
				Orijentacija(A, konveksni[P],konveksni[(P+n-1)%n])<0) {
				lijeva = P;
		  }
		  else lijeva = K;
		}

	desna = -1;
	P = 0, K = n-1;
	while(K - P > 1) {
		int S = (P+K)/2;
		//ShowMessage("Pocetak" + IntToStr(P));
		//ShowMessage("Sredina" + IntToStr(S));
        //ShowMessage("Kraj" + IntToStr(K));
		if (Orijentacija(A, konveksni[S],konveksni[(S+1)%n]) > 0 &&
			Orijentacija(A, konveksni[S],konveksni[(S+n-1)%n]) > 0) {
			desna = S;
			break;
		}
		if (Orijentacija(A, konveksni[S],konveksni[(S+1)%n]) > 0)
		  if(Orijentacija(A,konveksni[S],konveksni[P]) > 0 ||
			 Orijentacija(A,konveksni[P],konveksni[(P+n-1)%n])>0)
			   K = S-1;
		  else P = S+1;
		else if(Orijentacija(A,konveksni[S],konveksni[K])>0 ||
				Orijentacija(A,konveksni[K],konveksni[(K+1)%n])>0)
				P = S+1;
			 else K = S-1;
	}
	if(desna == -1)
		if(K==P)
		  desna = P;
		else {  //K == P+1
		  if (Orijentacija(A, konveksni[P],konveksni[(P+1)%n]) > 0 &&
				Orijentacija(A, konveksni[P],konveksni[(P+n-1)%n])>0) {
				desna = P;
		  }
		  else desna = K;
		}
}

/////////////////////////////////////////////////////////////

/// ZA PROJEKAT:


Cvor::Cvor(const int &pocetak, const int &kraj, double *X) {
    this->pocetak = pocetak;
	this->kraj = kraj;
	this->X = X;
	lijevi = nullptr;
	desni = nullptr;
	brojac = 0;
	ukupno = 0;
}

int Cvor::dajIndeksSredine() {
	return pocetak + (kraj - pocetak) / 2;
}

//---------------------------------------------------------------------------

Cvor* Cvor::dajLijevi() {
	if (lijevi == nullptr)
		lijevi = new Cvor(pocetak, dajIndeksSredine(), X);
	return lijevi;
}

//---------------------------------------------------------------------------

Cvor* Cvor::dajDesni() {
	if (desni == nullptr)
		desni = new Cvor(dajIndeksSredine(), kraj, X);
	return desni;
}

//---------------------------------------------------------------------------

void Pravougaonik::Crtaj(TImage* slika) {

	Tacka donjaDesna(gornjaDesna.x, donjaLijeva.y);
	Tacka gornjaLijeva(donjaLijeva.x, gornjaDesna.y);

	slika->Canvas->MoveTo(donjaLijeva.x, donjaLijeva.y);

	slika->Canvas->LineTo(donjaDesna.x, donjaDesna.y);
	slika->Canvas->LineTo(gornjaDesna.x, gornjaDesna.y);
	slika->Canvas->LineTo(gornjaLijeva.x, gornjaLijeva.y);
	slika->Canvas->LineTo(donjaLijeva.x, donjaLijeva.y);

}

//---------------------------------------------------------------------------

#pragma package(smart_init)
